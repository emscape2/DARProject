//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq; 
using System.Text;
using System.Data.SQLite;
using System.Globalization;
using System.Data;


/*
 * MetaDBFiller class consists of several functions to execute for or on the metaDatabase.
 * This class creates the metaDatabase and fills the metaDatabases with information and values and retrieves
 * the whole metaDatabase. 
 */

public class MetaDbFiller
{
    public static Dictionary<string, object> idfs = new Dictionary<string, object>();
    public static Dictionary<string, object> qf = new Dictionary<string, object>();
    public static Dictionary<string, object> jacquard = new Dictionary<string, object>();
    public static DatabaseConnection dbConnection;


    //Add idf values to Dictionary 
    public static void IdfMetaTable(string columname, Dictionary<string, double> iDfs)
    {
        idfs.Add(columname, iDfs);
    }

    //Add idf value with columname as key to Dictionary
    public static void IdfMetaTable(string columname, Dictionary<double, double> iDfs)
    {
        idfs.Add(columname, iDfs);
    }

    //Add qf value with columname as key to Dictionary
    public static void AddQfMetaTable(string columname, Dictionary<string, double> qfs)
    {
        qf.Add(columname, qfs);
    }

    //Add qf value with columname as key to Dictionary
    public static void AddQfMetaTable(string columname, Dictionary<double, double> qfs)
    {
        qf.Add(columname, qfs);
    }

    //Add jaccard value with columname as key to Dictionary
    public static void AddJaquardsMetaTable(string columname, Dictionary<string, object> jaquards)
    {
        jacquard.Add(columname, jaquards);
    }
    

    //Retrieves the whole metaDB 
    public static void LoadMetaDB()
    {
        // 1, because if a database is loaded, it contains more than one value, 1 acts as failsafe 
        if (idfs.Count > 1) 
        {
            return; 
        }

        TableProccessor.CalculateColumnProperties();

        qf = new Dictionary<string, object>();
        idfs = new Dictionary<string, object>();

        //Do for each column in columnProperty
        foreach (var columnProperty in TableProccessor.ColumnProperties)
        {
            if (columnProperty.Key != "id") 
            {
                string name = columnProperty.Key;
                DataTable tab = dbConnection.QueryForDataTable("SELECT * FROM " + name);

                //check if column contains numerical value
                if (!columnProperty.Value.numerical.HasValue || columnProperty.Value.numerical.Value)
                {
                    Dictionary<double, double> idf = new Dictionary<double, double>();
                    Dictionary<double, double> qfs = new Dictionary<double, double>();

                    //for each row in DataTable tab, save the idf and qf values in Dicitonary with associated key
                    foreach (DataRow row in tab.Rows)
                    {
                        idf.Add((double)row[0], (double)row[1]);
                        qfs.Add((double)row[0], (double)row[2]);
                    }
                    //add idf and qfs dictionaries in Dictionary with associated columnname as key
                    idfs.Add(name, idf);
                    qf.Add(name, qfs);

                }
                else
                {
                    Dictionary<string, double> idf = new Dictionary<string, double>();
                    Dictionary<string, double> qfs = new Dictionary<string, double>();
                    Dictionary<string, object> jacquard2 = new Dictionary<string, object>();

                    foreach (DataRow row in tab.Rows)
                    {
                        idf.Add((string)row[0], (double)row[1]);
                        qfs.Add((string)row[0], (double)row[2]);

                        if (tab.Columns.Count > 3) 
                        {
                            Dictionary<string, double> jaq = new Dictionary<string, double>();

                            for (int i = 3; i < tab.Columns.Count; i++)
                            {
                                jaq.Add((string)row.Table.Columns[i].ColumnName, (double)row[i]);
                            }

                            jacquard2.Add((string)row[0], jaq);

                        }
                    }

                    idfs.Add(name, idf);
                    qf.Add(name, qfs);

                    if(tab.Columns.Count > 3)
                    {
                        jacquard.Add(name, jacquard2);
                    }
                }
            }
        }
    }

    public static void CreateMetaTables()
    {
        //get all 
        foreach (var columnProperties in TableProccessor.ColumnProperties)
        {
            //first find out if there are jaquard values available for the column if numerical, using the library cointained in this class
            if(jacquard.ContainsKey(columnProperties.Key))
            {
                //execute the createmetatable to create a qfidf table for the column with jaccard values 
                CreateMetaTable(columnProperties.Key, false, true);
            }
            else
            {
                if(columnProperties.Value.numerical != null && !columnProperties.Value.numerical.Value)
                {
                    //execute the createmetatable to create a qfidf table for the numerical column 
                    CreateMetaTable(columnProperties.Key, false);
                }
                else
                {
                    //execute createmetatable to create a qfidf table for non numerical and non jaccard column
                    CreateMetaTable(columnProperties.Key, true);
                } 
            }   
        }
    }

    /// <summary>
    /// creates a meta table for each column. if !Numerical then jaquard should be filled 
    /// </summary>
    /// <param name="columname"></param>
    /// <param name="numerical"></param>
    /// <param name="jaquard"></param>
    public static void CreateMetaTable(string columname, bool? numerical, bool jaquard = false)
    {
        string create = null;
        string jaccardColumns = null;

        // if jaquard find the column values for the jaquard crossing table columns 
        if (numerical != false)
        {
            // create the create table statement with columns: name, idf, qf, possibly the jacquard columns
            create = "CREATE TABLE " + columname + " (value REAL, idf REAL, qf REAL);";
        }
        //check if columnname contains jaccard values
        else if (jaquard)
        {
            foreach (var jaccardColumn in jacquard[columname] as Dictionary<string, object>)
            {
                if (jaccardColumn.Key == "mercedes-benz")
                {
                    jaccardColumns += ", mercedesBenz REAL ";
                }
                else
                {
                    jaccardColumns += "," + jaccardColumn.Key + " REAL ";
                }
            }
            create = "CREATE TABLE " + columname + "(name varchar(30), idf REAL, qf REAL" + jaccardColumns + ");";
        }
        else
        {
            // create the create table statement with columns: name, idf, qf
            create = "CREATE TABLE " + columname + " (value varchar(30), idf REAL, qf REAL);"; 
        }
        //unleash it on the dbconnection
        dbConnection.runCreationSqlMeta(create);
    }
    

    //fill insert statement of whole metaDB
    public static void FillMetaDb()
    {
        //get all 
        foreach (var columnProperties in TableProccessor.ColumnProperties)
        {
            if (jacquard.ContainsKey(columnProperties.Key))
            {
                //execute the fillmetatable to insert in a qfidf table for the column with jaccard values 
                FillMetaTable(columnProperties.Key, false, true);
            }
            else
            {
                if(columnProperties.Value.numerical != null && !columnProperties.Value.numerical.Value)
                {
                    //execute the fillmetatable to insert in a qfidf table for the numerical column 
                    FillMetaTable(columnProperties.Key, false);
                }
                else
                {
                    FillMetaTable(columnProperties.Key, true);
                }
                //
            }
        }
    }
    //fill insert statement for one table
    public static void FillMetaTable(string columname, bool? numerical, bool jaquard = false)
    {
        string insert = null; 
        string idfValue = null;
        string qfValue = "0";

        //check if numerical is false for input
        if (numerical != true)
        {
            //foreach idf value from columnname do 
            foreach (var idf in idfs[columname] as Dictionary<string, double>)
            {
                //check if there is  qf for the idf entree, if not, fill in zero
                foreach(var qfs in qf[columname] as Dictionary<string, double>)
                {
                    if(qfs.Key.Equals(idf.Key))
                    {
                        qfValue = qfs.Value.ToString(CultureInfo.InvariantCulture);
                    }
                }

                string name = idf.Key;
                idfValue = idf.Value.ToString(CultureInfo.InvariantCulture);

                //check for the jaquard values
                if (jaquard != false)
                {
                    string key = idf.Key;
                    string jaccard = null;

                    //check if jacquard dictionary contains a idf.key
                    if ((jacquard[columname] as Dictionary<string, object>).ContainsKey(key)) 
                    {
                        var ju = (jacquard[columname] as Dictionary<string, object>);

                        Dictionary<string, double> juc = ju[key] as Dictionary<string, double>;
                       
                        foreach (var jac in juc) 
                        {
                            jaccard += "," + jac.Value.ToString(CultureInfo.InvariantCulture); 
                        }  
                    }
                    //put together a insert statement for value with jaccard values
                    insert = "INSERT INTO " + columname + " VALUES ( '" + name + "'," + idfValue + "," + qfValue + jaccard + ");";
                }
                else
                {
                    if(columname != "id")
                    {
                        //put together a insert statement for value with no jaccard values
                        insert = "INSERT INTO " + columname + " VALUES (" + "'" + name + "'" + "," + idfValue + "," + qfValue + ");";
                    }
                    
                }

                //fire the statements at the dbconnection
                dbConnection.runCreationSqlMeta(insert);
            }
        }
        else
        {
            if (columname != "id")
            {
                foreach (var idf in idfs[columname] as Dictionary<double, double>)
                {
                    //check if there is a qf related to the idf, if not, fill in zero
                    foreach (var qfs in qf[columname] as Dictionary<double, double>)
                    {
                        if (qfs.Key.Equals(idf.Key))
                        {
                            if (!double.IsNaN(qfs.Value)) 
                            {
                                qfValue = qfs.Value.ToString(CultureInfo.InvariantCulture);
                            }
                        }
                    }

                    //put together a insert statement for numerical
                    string idValue = idf.Key.ToString(CultureInfo.InvariantCulture);
                    idfValue = idf.Value.ToString(CultureInfo.InvariantCulture);
                    insert = "INSERT INTO " + columname + " VALUES (" + idValue + ", " + idfValue + ", " + qfValue + ");";

                    //fire the statements at the dbconnection
                    dbConnection.runCreationSqlMeta(insert);
                }
            }
        }
    }
}

