//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public class WorkloadParser
{

    
    /// <summary>
    /// parses the entire workload
    /// </summary>
    /// <param name="Workload"></param>
    /// <returns></returns>
	public static SQLQuery[] Parse( String Workload)
	{
        return Parse(Workload.Split('\n'));
	}

    /// <summary>
    /// parses the entire workload
    /// </summary>
    /// <param name="Workload"></param>
    /// <returns></returns>
    public static SQLQuery[] Parse(String[] Workload)
    {
        var toreturn = new List<SQLQuery>();
        for (int i = 2; i < Workload.Length; i++)
        {
            SQLQuery sqlQuery = ParseLine(Workload[i]);
            if (sqlQuery != null)
                toreturn.Add(sqlQuery);

        }
        return toreturn.ToArray();
    }

    /// <summary>
    /// parses a single sql query line
    /// </summary>
    /// <param name="sql"></param>
    /// <returns></returns>
    private static SQLQuery ParseLine(string sql)
    {
        SQLQuery toReturn = new SQLQuery();
        try
        {
            int times = Convert.ToInt32(sql.Split(' ')[0]);
            //record times in workload
            //neem alles achter "WHERE" 
            string[] separator = new string[] { "WHERE" };
            string everything = sql.Split(separator, StringSplitOptions.None)[1];
            //split op "AND"
            separator = new string[] { "AND" };
            string[] and = everything.Split(separator, StringSplitOptions.None);
            //switch op "IN" en "="

            List<string> ins = new List<string>();//process in and is statements differnetly
            List<string> isses = new List<string>();
            foreach (string str in and)
            {
                if (str.Contains("IN"))
                {
                    ins.Add(str);
                }
                else
                {
                    isses.Add(str);
                }
            }
            separator = new string[] { "IN" };
            foreach (string str in ins)
            {
                string tmp = str;
                tmp = tmp.Replace(")", string.Empty);
                tmp = tmp.Replace("\r", string.Empty);
                tmp = tmp.Replace("'", string.Empty);
                string[] In = tmp.Split(separator, StringSplitOptions.None);
                string column = In[0];
                column = column.Replace(" ", string.Empty);

                object[] desiredValues;
                int l = tmp.IndexOf("(");
                string values;
                values = tmp.Substring(l + 1, tmp.Length - (1 + l));
                desiredValues = values.Split(',');

                //retrieve the properties of any column and thereby determine the data type

                ColumnProperties properties = TableProccessor.ColumnProperties[column];


                if (properties.numerical != null && properties.numerical.Value)
                {
                    for (int i = 0; i < desiredValues.Length; i++)
                    {
                        desiredValues[i] = Convert.ToDecimal(desiredValues[i]);
                    }
                }

                toReturn.requiredValues.Add(column, desiredValues);


            }

            foreach (string str in isses)
            {
                string[] Is = str.Split('=');
                string column = Is[0];
                column = column.Replace(" ", string.Empty);
                column = column.Replace("\n", string.Empty);
                column = column.Replace("\r", string.Empty);
                Is[1] = Is[1].Replace(" ", string.Empty);
                Is[1] = Is[1].Replace("'", string.Empty);

                object[] desiredValues = new object[1];
                desiredValues[0] = Is[1];

                //retrieve the properties of column and determine datatype
                ColumnProperties properties = TableProccessor.ColumnProperties[column];

                if (properties.numerical != null && properties.numerical.Value)
                {
                    desiredValues[0] = Convert.ToDecimal(desiredValues[0]);
                }

                toReturn.requiredValues.Add(column, desiredValues);

            }

            toReturn.times = times;
            return toReturn;

        }
        catch (FormatException e)
        {
            //donothing
            //TODO Message box?
        }
        finally
        {
        }
        return null;
    }


}

