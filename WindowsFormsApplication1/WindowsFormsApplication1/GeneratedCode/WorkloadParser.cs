//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public class WorkloadParser
{

    

	public static SQLQuery[] Parse( String Workload)
	{
        return Parse(Workload.Split('\n'));
	}

    public static SQLQuery[] Parse(String[] Workload)
    {
        var toreturn = new List<SQLQuery>();
        for (int i = 2; i < Workload.Length; i++)
        {
            SQLQuery sqlQuery = ParseLine(Workload[i]);
            toreturn.Add(sqlQuery);

        }
        return toreturn.ToArray();
    }

    private static SQLQuery ParseLine(string sql)
    {
        SQLQuery toReturn = new SQLQuery();
        int times = Convert.ToInt32(sql.Split(' ')[0]);
        //record times in workload
        //neem alles achter "WHERE" 
        string[] separator = new string[] { "WHERE" };
        string everything = sql.Split(separator, StringSplitOptions.None)[1];
        //split op "AND"
        separator = new string[] { "AND" };
        string[] and = everything.Split(separator, StringSplitOptions.None);
        //switch op "IN" en "="
        
        List<string> ins = new List<string>();
        List<string> isses = new List<string>();
        foreach (string str in and)
        {
            if (str.Contains("IN"))
            {
                ins.Add(str);
            }
            else
            {
                isses.Add(str);
            }
        }
        separator = new string[] { "IN" };
        foreach (string str in ins)
        {
            string[] In = str.Split(separator, StringSplitOptions.None);
            string column = In[0];
            column = column.Replace(" ", string.Empty);
            

            object[] desiredValues;
            int l = str.IndexOf("(");
            string values;
            values = str.Substring(l + 1, str.Length - (2 + l));
            desiredValues = values.Split(',');

            //TODO somehow retrieve the properties of ccolumns and determine the data type
            toReturn.requiredValues.Add(column, desiredValues);//desiredvalues is dus altijd string ATM


        }

        foreach (string str in isses)
        {
            string[] Is = str.Split('=');
            string column = Is[0];
            column = column.Replace(" ", string.Empty);
            Is[1] = Is[1].Replace(" ", string.Empty);
            Is[1] = Is[1].Replace("'", string.Empty);

            object[] desiredValues = new object[1];
            toReturn.requiredValues.Add(column, desiredValues);

        }

        toReturn.times = times;
        return toReturn;

    }


}

