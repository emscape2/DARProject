//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public class WorkloadProcessor
{


    /// <summary>
    /// here the QF similarities should be calculated
    /// </summary>
    /// <param name="Workload"></param>
    public static void Process(SQLQuery[] Workload)
    {

        foreach (var column in TableProccessor.ColumnProperties)
        {
            if (column.Value.numerical != null && !column.Value.numerical.Value)
            {
                GetNonNumericalQf(Workload, column.Key);
            }
            else
            {
                GetNumericalQf(Workload, column.Key);
            }

        }


    }

    public static void GetNumericalQf(SQLQuery[] Workload, string columname)
    {
        double size = TableProccessor.GetIntervalSize(columname);
        ColumnProperties properties = TableProccessor.ColumnProperties[columname];
        for(double d /*hehe*/ = properties.min; d < properties.max; d += size)
        {

        }
    }

        public static void GetNonNumericalQf(SQLQuery[] Workload, string columname)
    {
        Dictionary<object, int> pairing = new Dictionary<object, int>();
        List<int> timeDictionary = new List<int>() ;
        int counter = 0;

        foreach(SQLQuery query in Workload)
        {
            if (query.requiredValues.ContainsKey(columname))
            {
                object[] values = query.requiredValues[columname];
                int times = query.times;
                foreach (var value in values)
                {
                    if (!pairing.ContainsKey(value))
                    {
                        pairing.Add(value, counter);
                        timeDictionary.Add(times);
                        counter++;
                    }
                    else
                    {
                        int index = pairing[value];
                        timeDictionary[index] += times;
                    }
                    
                }
            }
        }
        int rqfmax = timeDictionary.Max();
        Dictionary<string, double> qfs = new Dictionary<string, double>();
        foreach(var pair in pairing)
        {
            double qf = timeDictionary[pair.Value] / rqfmax;
            qfs.Add(pair.Key.ToString(), qf);
        }

        MetaDbFiller.AddQfMetaTable(columname, qfs);

    }

    public static double getNumericalQFFromU(double u, List<SQLQuery> Workload, string columname, int n)
    {
        double ti;
        double qf;

        foreach (SQLQuery query in Workload)
        {
            ColumnProperties properties = TableProccessor.ColumnProperties[columname];
            object[] values = query.requiredValues[columname];
            qf = 0;

            foreach (var value in values)
            {
                ti = Convert.ToDouble(value);
                qf += (-0.5 * (Math.Pow(((ti - u) / properties.max - properties.min), 2) / n));
            }
        }

        return qf;
    }




}

