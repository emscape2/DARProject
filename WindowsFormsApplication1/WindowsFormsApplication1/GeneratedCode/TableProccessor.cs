//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;

public class TableProccessor
{

    public static DatabaseConnection connection;
    public static Dictionary<string, ColumnProperties> ColumnProperties = new Dictionary<string, ColumnProperties>();
    private static DataTable table = null;


    /// <summary>
    /// creates and filles a table according to the raw sql supplied
    /// </summary>
    /// <param name="sql"></param>
    public static void CreateAndFillTable(string sql)
    {
        connection.runCreationSql(sql);
    }

    /// <summary>
    /// retrieves the autompg table, not sure yetif needed, but here it is anyways.
    /// </summary>
    /// <returns></returns>
    public static DataTable RetrieveTable()
    {
        if (!(table == null))
            return table;

        table = connection.QueryForDataTable("SELECT * FROM autompg");
        return table;
    }
    
    /// <summary>
    /// should calculate the idf values and tell the metaDbFiller to fill the metaDB
    /// </summary>
    /// <param name="table"></param>
    public static void Process()
	{
        //voor iedere column check if numerical
        foreach (var column in ColumnProperties)
        {
            if (column.Value.numerical.Value)
            {
                int max = 0; 
                Dictionary<string,int> Dfs = GetDfsForText(column.Key, ref max);
                throw new NotImplementedException("from DF and maxx to idf has yet to be implemented");
                // implement idf
                //write to table in metadb
            }
            else
            {
                Dictionary<decimal, decimal> Idfs = getIdfsForNumerical(column.Key);
                // write to table in metadb
            }
        }


	}

    //gets a dictionary from value to amount of occurrences and max occurrences
    public static Dictionary<string, int> GetDfsForText(string columname, ref int max)
    {
        Dictionary<string, int> DFs = new Dictionary<string, int>();

        //grouped column values so the sqlite takes over the workload, might come at hand when extending this
        DataTable column = connection.QueryForDataTable("SELECT "+ columname + " FROM autompg  GROUPBY " + columname);
        int j = 1;
        string lastvalue = "";
        for (int i = 0; i <column.Rows.Count; i++)
        {
            if ((string)column.Rows[i][columname] == lastvalue)
            {
                j++;
            }
            else if (i > 0)
            {
                DFs.Add((string)column.Rows[i - 1][columname], j);
                if (j > max)
                    max = j;
                j = 1;
            }
        }
        return DFs;
    }


    public static Dictionary<decimal, decimal> getIdfsForNumerical(string columname)
    {

        throw new NotImplementedException();
    }

    
    /// <summary>
    /// Fixes all the columnProperties from the database
    /// </summary>
    public static void CalculateColumnProperties()
    {
        List<string> columnNames = new List<string>();

        DataTable tableInfo = connection.QueryForDataTable("PRAGMA table_info('autompg')");
        foreach (DataRow row in tableInfo.Rows)
        {
            columnNames.Add((string)row[tableInfo.Columns[1]]);
        }

        for (int i = 0; i < tableInfo.Rows.Count; i++)
        {
            bool? numerical;
            DataRow row = tableInfo.Rows[i];
            if (row[tableInfo.Columns[2]].ToString().ToLower().Contains("text"))
            {
                numerical = false;
            }
            //integer values hebben altijd weinig mogelijkheden, 
            else if (row[tableInfo.Columns[2]].ToString().ToLower().Contains("integer"))
            {
                numerical = null;//mag voor integers tot n bepaald limiet false/ of een speciale waarde zijn
            }
            else
            {
                numerical = true;
            }
            ColumnProperties.Add(columnNames[i], new ColumnProperties(numerical, columnNames[i]));
        }
    }
    
}


